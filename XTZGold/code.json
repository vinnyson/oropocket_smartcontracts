parameter (or (or (or (pair %approve (address %spender) (nat %value)) (pair %burn (address %address) (nat %value))) (or (pair %getAdministrator unit (contract address)) (or (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat)) (pair %getBalance address (contract nat))))) (or (or (pair %getTotalSupply unit (contract nat)) (or (pair %mint (address %address) (nat %value)) (address %setAdministrator))) (or (bool %setPause) (or (pair %transfer (address %from) (pair (address %to) (nat %value))) (pair %update_metadata (string %key) (bytes %value))))));
storage   (pair (pair (address %administrator) (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (big_map %metadata string bytes))) (pair (bool %paused) (pair (big_map %token_metadata nat (pair (nat %token_id) (map %token_info string bytes))) (nat %totalSupply))));
code
  {
    CAST (pair (or (or (or (pair address nat) (pair address nat)) (or (pair unit (contract address)) (or (pair (pair address address) (contract nat)) (pair address (contract nat))))) (or (or (pair unit (contract nat)) (or (pair address nat) address)) (or bool (or (pair address (pair address nat)) (pair string bytes))))) (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)))); # pair (or (or (or (pair address nat) (pair address nat)) (or (pair unit (contract address)) (or (pair (pair address address) (contract nat)) (pair address (contract nat))))) (or (or (pair unit (contract nat)) (or (pair address nat) address)) (or bool (or (pair address (pair address nat)) (pair string bytes))))) (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)))
    UNPAIR;     # or (or (or (pair address nat) (pair address nat)) (or (pair unit (contract address)) (or (pair (pair address address) (contract nat)) (pair address (contract nat))))) (or (or (pair unit (contract nat)) (or (pair address nat) address)) (or bool (or (pair address (pair address nat)) (pair string bytes)))) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                # == approve ==
                # if ~ (self.data.balances.contains(sp.sender)): # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET 3;      # big_map address (pair (map address nat) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SENDER;     # @sender : big_map address (pair (map address nat) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                MEM;        # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF
                  {}
                  {
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    # self.data.balances[sp.sender] = sp.record(approvals = {}, balance = 0) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    SENDER;     # @sender : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    SWAP;       # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                # sp.verify(~ self.data.paused, 'FA1.2_Paused') # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET 3;      # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF
                  {
                    PUSH string "FA1.2_Paused"; # string : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }
                  {}; # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                # sp.verify((self.data.balances[sp.sender].approvals.get(params.spender, default_value = 0) == 0) | (params.value == 0), 'FA1.2_UnsafeAllowanceChange') # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                PUSH nat 0; # nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP 3;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET 3;      # big_map address (pair (map address nat) nat) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SENDER;     # @sender : big_map address (pair (map address nat) nat) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET;        # option (pair (map address nat) nat) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF_NONE
                  {
                    PUSH int 92; # int : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:92 # @some : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # @some : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # map address nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP 3;      # pair address nat : map address nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # address : map address nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET;        # option nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF_NONE
                  {
                    PUSH nat 0; # nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }
                  {
                    # of_some: Get-item:92 # @some : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                COMPARE;    # int : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                EQ;         # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF
                  {
                    PUSH bool True; # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }
                  {
                    DUP;        # pair address nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CDR;        # nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    PUSH nat 0; # nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    COMPARE;    # int : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    EQ;         # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF
                  {}
                  {
                    PUSH string "FA1.2_UnsafeAllowanceChange"; # string : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }; # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                # self.data.balances[sp.sender].approvals[params.spender] = params.value # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                SENDER;     # @sender : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                DUP;        # @sender : @sender : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                DUG 2;      # @sender : big_map address (pair (map address nat) nat) : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                GET;        # option (pair (map address nat) nat) : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                IF_NONE
                  {
                    PUSH int 94; # int : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                DUP;        # @some : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                CAR;        # map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                DUP 8;      # pair address nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                CDR;        # nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                SOME;       # option nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                DIG 8;      # pair address nat : option nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                CAR;        # address : option nat : map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                UPDATE;     # map address nat : @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                UPDATE 1;   # @some : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                SOME;       # option (pair (map address nat) nat) : @sender : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                SWAP;       # @sender : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }
              {
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                # == burn ==
                # sp.verify(sp.sender == self.data.administrator, 'FA1.2_NotAdmin') # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # address : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SENDER;     # @sender : address : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                COMPARE;    # int : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                EQ;         # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF
                  {}
                  {
                    PUSH string "FA1.2_NotAdmin"; # string : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }; # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                # sp.verify(self.data.balances[params.address].balance >= params.value, 'FA1.2_InsufficientBalance') # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP;        # pair address nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CDR;        # nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP 3;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET 3;      # big_map address (pair (map address nat) nat) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP 3;      # pair address nat : big_map address (pair (map address nat) nat) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # address : big_map address (pair (map address nat) nat) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET;        # option (pair (map address nat) nat) : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF_NONE
                  {
                    PUSH int 140; # int : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:140 # @some : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # @some : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CDR;        # nat : nat : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                COMPARE;    # int : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GE;         # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF
                  {}
                  {
                    PUSH string "FA1.2_InsufficientBalance"; # string : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }; # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                # self.data.balances[params.address].balance = sp.as_nat(self.data.balances[params.address].balance - params.value) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP 6;      # pair address nat : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF_NONE
                  {
                    PUSH int 141; # int : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DUP 7;      # pair address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DIG 8;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                GET 3;      # big_map address (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                DUP 9;      # pair address nat : big_map address (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                CAR;        # address : big_map address (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                GET;        # option (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                IF_NONE
                  {
                    PUSH int 141; # int : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:141 # @some : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                  }; # @some : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                CDR;        # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                SUB;        # int : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                ISNAT;      # option nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                IF_NONE
                  {
                    PUSH int 141; # int : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.value) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SWAP;       # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CDR;        # nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DIG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET 6;      # nat : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SUB;        # int : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                ISNAT;      # option nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF_NONE
                  {
                    PUSH int 142; # int : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                UPDATE 6;   # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }; # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
            NIL operation; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract address)
                # == getAdministrator ==
                # sp.result(self.data.administrator) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract address)
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract address)
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract address) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair unit (contract address) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # address : pair unit (contract address) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                # sp.transfer(__s1.value, sp.tez(0), sp.snd(params)) # address : pair unit (contract address) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                NIL operation; # list operation : address : pair unit (contract address) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DIG 2;      # pair unit (contract address) : list operation : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CDR;        # contract address : list operation : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                PUSH mutez 0; # mutez : contract address : list operation : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DIG 3;      # address : mutez : contract address : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                TRANSFER_TOKENS; # operation : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CONS;       # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat)
                    # == getAllowance ==
                    # if self.data.balances.contains(sp.fst(params).owner): # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat)
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat)
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 3;      # big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address address) (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # pair (pair address address) (contract nat) : pair (pair address address) (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUG 2;      # pair (pair address address) (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address address : big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    MEM;        # bool : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat)
                        # sp.result(self.data.balances[sp.fst(params).owner].approvals.get(sp.fst(params).spender, default_value = 0)) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat)
                        DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat)
                        DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET 3;      # big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        SWAP;       # pair (pair address address) (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP;        # pair (pair address address) (contract nat) : pair (pair address address) (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUG 2;      # pair (pair address address) (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # pair address address : big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # address : big_map address (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET;        # option (pair (map address nat) nat) : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        IF_NONE
                          {
                            PUSH int 110; # int : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:110 # @some : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                          }; # @some : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # map address nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        SWAP;       # pair (pair address address) (contract nat) : map address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP;        # pair (pair address address) (contract nat) : pair (pair address address) (contract nat) : map address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUG 2;      # pair (pair address address) (contract nat) : map address nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # pair address address : map address nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CDR;        # address : map address nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET;        # option nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        IF_NONE
                          {
                            PUSH nat 0; # nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                          }
                          {
                            # of_some: Get-item:110 # @some : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                          }; # nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }
                      {
                        # sp.result(0) # pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        PUSH nat 0; # nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    # sp.transfer(__s2.value, sp.tez(0), sp.snd(params)) # nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    NIL operation; # list operation : nat : pair (pair address address) (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DIG 2;      # pair (pair address address) (contract nat) : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CDR;        # contract nat : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DIG 3;      # nat : mutez : contract nat : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CONS;       # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }
                  {
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat)
                    # == getBalance ==
                    # if self.data.balances.contains(sp.fst(params)): # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat)
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat)
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 3;      # big_map address (pair (map address nat) nat) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair address (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # pair address (contract nat) : pair address (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUG 2;      # pair address (contract nat) : big_map address (pair (map address nat) nat) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : big_map address (pair (map address nat) nat) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    MEM;        # bool : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat)
                        # sp.result(self.data.balances[sp.fst(params)].balance) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat)
                        DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat)
                        DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET 3;      # big_map address (pair (map address nat) nat) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        SWAP;       # pair address (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP;        # pair address (contract nat) : pair address (contract nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUG 2;      # pair address (contract nat) : big_map address (pair (map address nat) nat) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # address : big_map address (pair (map address nat) nat) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET;        # option (pair (map address nat) nat) : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        IF_NONE
                          {
                            PUSH int 103; # int : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:103 # @some : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                          }; # @some : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CDR;        # nat : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }
                      {
                        # sp.result(0) # pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        PUSH nat 0; # nat : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # nat : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    # sp.transfer(__s3.value, sp.tez(0), sp.snd(params)) # nat : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    NIL operation; # list operation : nat : pair address (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DIG 2;      # pair address (contract nat) : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CDR;        # contract nat : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DIG 3;      # nat : mutez : contract nat : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CONS;       # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
          }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract nat)
                # == getTotalSupply ==
                # sp.result(self.data.totalSupply) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract nat)
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract nat)
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair unit (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                GET 6;      # nat : pair unit (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                # sp.transfer(__s4.value, sp.tez(0), sp.snd(params)) # nat : pair unit (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                NIL operation; # list operation : nat : pair unit (contract nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DIG 2;      # pair unit (contract nat) : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CDR;        # contract nat : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                PUSH mutez 0; # mutez : contract nat : list operation : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                DIG 3;      # nat : mutez : contract nat : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                TRANSFER_TOKENS; # operation : list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CONS;       # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    # == mint ==
                    # sp.verify(sp.sender == self.data.administrator, 'FA1.2_NotAdmin') # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SENDER;     # @sender : address : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    COMPARE;    # int : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    EQ;         # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        PUSH string "FA1.2_NotAdmin"; # string : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        FAILWITH;   # FAILED
                      }; # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    # if ~ (self.data.balances.contains(params.address)): # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 3;      # big_map address (pair (map address nat) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair address nat : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # pair address nat : pair address nat : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUG 2;      # pair address nat : big_map address (pair (map address nat) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : big_map address (pair (map address nat) nat) : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    MEM;        # bool : pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                        # self.data.balances[params.address] = sp.record(approvals = {}, balance = 0) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        DUP 6;      # pair address nat : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                        SWAP;       # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # pair address nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    # self.data.balances[params.address].balance += params.value # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    DUP 6;      # pair address nat : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    IF_NONE
                      {
                        PUSH int 133; # int : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    DUP 8;      # pair address nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    CDR;        # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address nat
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    # self.data.totalSupply += params.value # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    GET 6;      # nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address nat
                    DIG 2;      # pair address nat : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CDR;        # nat : nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    ADD;        # nat : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    UPDATE 6;   # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }
                  {
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : address
                    # == setAdministrator ==
                    # sp.verify(sp.sender == self.data.administrator, 'FA1.2_NotAdmin') # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : address
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : address
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SENDER;     # @sender : address : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    COMPARE;    # int : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    EQ;         # bool : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        PUSH string "FA1.2_NotAdmin"; # string : address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        FAILWITH;   # FAILED
                      }; # address : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : address
                    # self.data.administrator = params # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : address
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : address
                    CDR;        # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : address
                    DIG 2;      # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                NIL operation; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : bool
                # == setPause ==
                # sp.verify(sp.sender == self.data.administrator, 'FA1.2_NotAdmin') # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : bool
                DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : bool
                DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                CAR;        # address : bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                SENDER;     # @sender : address : bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                COMPARE;    # int : bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                EQ;         # bool : bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                IF
                  {}
                  {
                    PUSH string "FA1.2_NotAdmin"; # string : bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    FAILWITH;   # FAILED
                  }; # bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                # self.data.paused = params # bool : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                UPDATE 3;   # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    # == transfer ==
                    # sp.verify((sp.sender == self.data.administrator) | ((~ self.data.paused) & ((params.from_ == sp.sender) | (self.data.balances[params.from_].approvals[sp.sender] >= params.value))), 'FA1.2_NotAllowed') # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SENDER;     # @sender : address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    COMPARE;    # int : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    EQ;         # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {
                        PUSH bool True; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET 3;      # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        IF
                          {
                            PUSH bool False; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                          }
                          {
                            DUP;        # pair address (pair address nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            CAR;        # address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            SENDER;     # @sender : address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            COMPARE;    # int : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            EQ;         # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            IF
                              {
                                PUSH bool True; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                              }
                              {
                                DUP;        # pair address (pair address nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                GET 4;      # nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                DUP 3;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                GET 3;      # big_map address (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                DUP 3;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                CAR;        # address : big_map address (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                GET;        # option (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                IF_NONE
                                  {
                                    PUSH int 75; # int : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    # of_some: Get-item:75 # @some : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                  }; # @some : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                CAR;        # map address nat : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                SENDER;     # @sender : map address nat : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                GET;        # option nat : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                IF_NONE
                                  {
                                    PUSH int 75; # int : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                    FAILWITH;   # FAILED
                                  }
                                  {
                                    # of_some: Get-item:75 # @some : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                  }; # @some : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                COMPARE;    # int : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                                GE;         # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                              }; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                          }; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        PUSH string "FA1.2_NotAllowed"; # string : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        FAILWITH;   # FAILED
                      }; # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    # if ~ (self.data.balances.contains(params.from_)): # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 3;      # big_map address (pair (map address nat) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair address (pair address nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # pair address (pair address nat) : pair address (pair address nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUG 2;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : big_map address (pair (map address nat) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    MEM;        # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        # self.data.balances[params.from_] = sp.record(approvals = {}, balance = 0) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        DUP 6;      # pair address (pair address nat) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        CAR;        # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        SWAP;       # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    # if ~ (self.data.balances.contains(params.to_)): # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 3;      # big_map address (pair (map address nat) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair address (pair address nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # pair address (pair address nat) : pair address (pair address nat) : big_map address (pair (map address nat) nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUG 2;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 3;      # address : big_map address (pair (map address nat) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    MEM;        # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        # self.data.balances[params.to_] = sp.record(approvals = {}, balance = 0) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PUSH (option (pair (map address nat) nat)) (Some (Pair {} 0)); # option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        DUP 6;      # pair address (pair address nat) : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        GET 3;      # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        SWAP;       # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    # sp.verify(self.data.balances[params.from_].balance >= params.value, 'FA1.2_InsufficientBalance') # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # pair address (pair address nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 4;      # nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP 3;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 3;      # big_map address (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP 3;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : big_map address (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET;        # option (pair (map address nat) nat) : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF_NONE
                      {
                        PUSH int 81; # int : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:81 # @some : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # @some : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CDR;        # nat : nat : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    COMPARE;    # int : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GE;         # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        PUSH string "FA1.2_InsufficientBalance"; # string : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        FAILWITH;   # FAILED
                      }; # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    # self.data.balances[params.from_].balance = sp.as_nat(self.data.balances[params.from_].balance - params.value) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP 6;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF_NONE
                      {
                        PUSH int 82; # int : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP 7;      # pair address (pair address nat) : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    GET 4;      # nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DIG 8;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    GET 3;      # big_map address (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    DUP 9;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    CAR;        # address : big_map address (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    GET;        # option (pair (map address nat) nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    IF_NONE
                      {
                        PUSH int 82; # int : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        FAILWITH;   # FAILED
                      }
                      {
                        # of_some: Get-item:82 # @some : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                      }; # @some : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    CDR;        # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    SUB;        # int : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    ISNAT;      # option nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    IF_NONE
                      {
                        PUSH int 82; # int : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    # self.data.balances[params.to_].balance += params.value # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    DUP 6;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    GET 3;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    IF_NONE
                      {
                        PUSH int 83; # int : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    DUP 8;      # pair address (pair address nat) : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    GET 4;      # nat : nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    ADD;        # nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    UPDATE 2;   # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                    SWAP;       # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    # if (params.from_ != sp.sender) & (~ (sp.sender == self.data.administrator)): # pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    DUP;        # pair address (pair address nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SENDER;     # @sender : address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    COMPARE;    # int : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    NEQ;        # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        SENDER;     # @sender : address : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        COMPARE;    # int : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        NEQ;        # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }
                      {
                        PUSH bool False; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # bool : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {
                        SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        # self.data.balances[params.from_].approvals[sp.sender] = sp.as_nat(self.data.balances[params.from_].approvals[sp.sender] - params.value) # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat)
                        DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP 6;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        IF_NONE
                          {
                            PUSH int 85; # int : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        CAR;        # map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DUP 8;      # pair address (pair address nat) : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        GET 4;      # nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        DIG 9;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        GET 3;      # big_map address (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair address (pair address nat)
                        DIG 9;      # pair address (pair address nat) : big_map address (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        CAR;        # address : big_map address (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        GET;        # option (pair (map address nat) nat) : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        IF_NONE
                          {
                            PUSH int 85; # int : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:85 # @some : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                          }; # @some : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        CAR;        # map address nat : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        SENDER;     # @sender : map address nat : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        GET;        # option nat : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        IF_NONE
                          {
                            PUSH int 85; # int : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                            FAILWITH;   # FAILED
                          }
                          {
                            # of_some: Get-item:85 # @some : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                          }; # @some : nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        SUB;        # int : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        ISNAT;      # option nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        IF_NONE
                          {
                            PUSH int 85; # int : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        SOME;       # option nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        SENDER;     # @sender : option nat : map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        UPDATE;     # map address nat : @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        UPDATE 1;   # @some : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        UPDATE;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                        PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }
                      {
                        DROP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                      }; # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }
                  {
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair string bytes
                    # == update_metadata ==
                    # sp.verify(sp.sender == self.data.administrator, 'FA1.2_NotAdmin') # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair string bytes
                    DUP;        # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair string bytes
                    DUG 2;      # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    CAR;        # address : pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SENDER;     # @sender : address : pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    COMPARE;    # int : pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    EQ;         # bool : pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    IF
                      {}
                      {
                        PUSH string "FA1.2_NotAdmin"; # string : pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                        FAILWITH;   # FAILED
                      }; # pair string bytes : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                    SWAP;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair string bytes
                    # self.data.metadata[params.key] = params.value # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)) : pair string bytes
                    UNPAIR;     # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    UNPAIR;     # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    SWAP;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    UNPAIR;     # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    SWAP;       # big_map string bytes : big_map address (pair (map address nat) nat) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    DUP 5;      # pair string bytes : big_map string bytes : big_map address (pair (map address nat) nat) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    CDR;        # bytes : big_map string bytes : big_map address (pair (map address nat) nat) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    SOME;       # option bytes : big_map string bytes : big_map address (pair (map address nat) nat) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat) : pair string bytes
                    DIG 5;      # pair string bytes : option bytes : big_map string bytes : big_map address (pair (map address nat) nat) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    CAR;        # string : option bytes : big_map string bytes : big_map address (pair (map address nat) nat) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    UPDATE;     # big_map string bytes : big_map address (pair (map address nat) nat) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    SWAP;       # big_map address (pair (map address nat) nat) : big_map string bytes : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : address : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    SWAP;       # address : pair (big_map address (pair (map address nat) nat)) (big_map string bytes) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    PAIR;       # pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes)) : pair bool (pair (big_map nat (pair nat (map string bytes))) nat)
                    PAIR;       # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
                  }; # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
              }; # pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
            NIL operation; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
          }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
      }; # list operation : pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat))
    PAIR;       # pair (list operation) (pair (pair address (pair (big_map address (pair (map address nat) nat)) (big_map string bytes))) (pair bool (pair (big_map nat (pair nat (map string bytes))) nat)))
  };
